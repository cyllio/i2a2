# Importa a biblioteca Streamlit para criar a interface web.
import streamlit as st
# Importa a biblioteca Pandas para manipula√ß√£o e an√°lise de dados (DataFrames).
import pandas as pd
# Importa a biblioteca requests para fazer requisi√ß√µes HTTP (embora n√£o seja usada no fluxo atual de carregamento local).
import requests
# Importa a classe OpenAI para interagir com a API do OpenAI.
from openai import OpenAI
# Importa a biblioteca json para trabalhar com dados JSON.
import json
# Importa a biblioteca os para interagir com o sistema operacional, como caminhos de arquivo.
import os
# Importa StringIO para tratar strings como arquivos, √∫til para ler CSVs em mem√≥ria.
from io import StringIO

# Configura√ß√£o da p√°gina do Streamlit.
st.set_page_config(
    page_title="Chatbot Planilha", # Define o t√≠tulo que aparece na aba do navegador.
    page_icon="üìä", # Define o √≠cone da p√°gina na aba do navegador.
    layout="wide" # Define o layout da p√°gina como "wide" para ocupar mais espa√ßo.
)

# T√≠tulo principal exibido na aplica√ß√£o Streamlit.
st.title("üìä Chatbot da Planilha")
# Subt√≠tulo/descri√ß√£o abaixo do t√≠tulo.
st.markdown("Fa√ßa perguntas sobre os dados da planilha e receba respostas inteligentes!")

# Fun√ß√£o para carregar dados dos arquivos CSV locais.
# O decorador `@st.cache_data` faz com que o Streamlit "cacheie" o resultado desta fun√ß√£o.
# Isso significa que, se os argumentos da fun√ß√£o n√£o mudarem, ela n√£o ser√° executada novamente,
# o que acelera a aplica√ß√£o ao evitar o recarregamento de dados a cada intera√ß√£o do usu√°rio.
@st.cache_data
def load_data_from_local():
    """Carrega dados de arquivos CSV especificados do diret√≥rio local."""
    print("Iniciando carregamento de dados dos arquivos locais...") # Mensagem de log para console.

    header_file_name = "202401_NFs_Cabecalho.csv" # Nome do arquivo CSV de cabe√ßalho.
    items_file_name = "202401_NFs_Itens.csv"     # Nome do arquivo CSV de itens.

    header_df = None # Inicializa o DataFrame para o cabe√ßalho como None.
    items_df = None  # Inicializa o DataFrame para os itens como None.

    try:
        # Obt√©m o diret√≥rio (pasta) onde o script Python atual (`app3.py`) est√° sendo executado.
        script_dir = os.path.dirname(__file__)
        # Constr√≥i o caminho completo para o arquivo de cabe√ßalho,
        # unindo o diret√≥rio do script com o nome do arquivo.
        header_file_path = os.path.join(script_dir, header_file_name)
        # Constr√≥i o caminho completo para o arquivo de itens.
        items_file_path = os.path.join(script_dir, items_file_name)

        print(f"Tentando carregar '{header_file_path}'...") # Log do caminho do arquivo de cabe√ßalho.
        # Verifica se o arquivo de cabe√ßalho existe no caminho especificado.
        if os.path.exists(header_file_path):
            # Se existir, l√™ o arquivo CSV para um DataFrame Pandas.
            header_df = pd.read_csv(header_file_path)
            print(f"{header_file_name} carregado. Shape: {header_df.shape}") # Log de sucesso e dimens√µes do DataFrame.
        else:
            # Se o arquivo n√£o for encontrado, exibe um aviso no console e no Streamlit.
            print(f"Arquivo n√£o encontrado: {header_file_path}")
            st.warning(f"Arquivo n√£o encontrado: {header_file_path}")

        print(f"Tentando carregar '{items_file_path}'...") # Log do caminho do arquivo de itens.
        # Verifica se o arquivo de itens existe.
        if os.path.exists(items_file_path):
            # Se existir, l√™ o arquivo CSV para um DataFrame Pandas.
            items_df = pd.read_csv(items_file_path)
            print(f"{items_file_name} carregado. Shape: {items_df.shape}") # Log de sucesso e dimens√µes do DataFrame.
        else:
            # Se o arquivo n√£o for encontrado, exibe um aviso no console e no Streamlit.
            print(f"Arquivo n√£o encontrado: {items_file_path}")
            st.warning(f"Arquivo n√£o encontrado: {items_file_path}")

        # Verifica se ambos os DataFrames foram carregados com sucesso (n√£o s√£o None).
        if header_df is None or items_df is None:
            # Se um ou ambos n√£o foram encontrados, exibe um aviso e retorna None para ambos.
            print(f"N√£o foi poss√≠vel encontrar um ou ambos os arquivos CSV esperados ({header_file_name}, {items_file_name}).")
            st.warning(f"N√£o foi poss√≠vel encontrar um ou ambos os arquivos CSV esperados ({header_file_name}, {items_file_name}).")
            return None, None

        print("Ambos os dataframes carregados com sucesso.") # Log de sucesso no carregamento.
        return header_df, items_df # Retorna os dois DataFrames carregados.

    except Exception as e:
        # Captura qualquer erro que ocorra durante o processo de carregamento de arquivos.
        print(f"Erro geral ao carregar dados dos arquivos locais: {e}")
        st.error(f"Erro ao carregar dados dos arquivos locais: {e}") # Exibe o erro no Streamlit.
        return None, None # Em caso de erro, retorna None para ambos os DataFrames.

def query_ai(question, header_df, items_df):
    """Processa a pergunta do usu√°rio, realiza an√°lises de dados e consulta a IA para obter uma resposta."""
    try:
        # Carregar a chave da API dos segredos do Streamlit
        openai_api_key = st.secrets["openai"]["api_key"] # A chave da API do OpenAI √© carregada aqui dos segredos do Streamlit.
        client = OpenAI(api_key=openai_api_key) # O cliente OpenAI √© inicializado com a chave da API.

        # Fun√ß√£o auxiliar para tentar encontrar a coluna de fornecedor
        def find_supplier_column(df):
            """Tenta identificar a coluna que cont√©m nomes de fornecedores em um DataFrame."""
            # Nomes de colunas comuns para fornecedor
            possible_supplier_cols = ['fornecedor', 'emitente', 'nome fornecedor', 'razao social']
            for col in df.columns:
                for possible_name in possible_supplier_cols:
                    if possible_name in col.lower():
                        # Adicionar verifica√ß√£o adicional para evitar falsos positivos como 'chave do fornecedor'
                        if 'chave' not in col.lower() and 'cnpj' not in col.lower() and 'cpf' not in col.lower():
                            return col # Retorna o nome da coluna encontrada.
            return None # Retorna None se n√£o encontrar uma coluna de fornecedor adequada.

        # Fun√ß√£o auxiliar para tentar encontrar a coluna de chave de acesso
        def find_chave_acesso_column(df):
             """Tenta identificar a coluna que cont√©m as chaves de acesso das notas fiscais em um DataFrame."""
             # Nomes de colunas comuns para chave de acesso
             possible_chave_cols = ['chave de acesso', 'chaveacesso', 'chave_acesso', 'nfkey']
             for col in df.columns:
                 for possible_name in possible_chave_cols:
                    if possible_name in col.lower():
                        return col # Retorna o nome da coluna encontrada.
             return None # Retorna None se n√£o encontrar uma coluna de chave de acesso adequada.


        prompt_lower = question.lower() # Converte a pergunta do usu√°rio para min√∫sculas para facilitar a compara√ß√£o.
        formatted_result = None # Vari√°vel para armazenar resultados pr√©-calculados de an√°lises espec√≠ficas.

        # --- L√≥gica de detec√ß√£o e c√°lculo para perguntas espec√≠ficas ---
        # Verifica se a pergunta do usu√°rio solicita os 10 principais fornecedores.
        if "10 nomes de fornecedores com mais notas fiscais" in prompt_lower or "top 10 fornecedores" in prompt_lower:
            # Tenta encontrar as colunas de fornecedor e chave de acesso no DataFrame de cabe√ßalho.
            supplier_col = find_supplier_column(header_df)
            chave_acesso_col = find_chave_acesso_column(header_df)

            # Se ambas as colunas forem encontradas, procede com o c√°lculo.
            if supplier_col and chave_acesso_col:
                try:
                    # Contar notas fiscais por fornecedor:
                    # Agrupa o DataFrame de cabe√ßalho pela coluna do fornecedor
                    # e conta o n√∫mero de chaves de acesso √∫nicas para cada fornecedor.
                    # Isso garante que cada nota fiscal seja contada uma √∫nica vez, mesmo que haja linhas duplicadas no cabe√ßalho.
                    fornecedores_count = header_df.groupby(supplier_col)[chave_acesso_col].nunique()

                    # Obt√©m os top 10 fornecedores com base na contagem de notas fiscais, em ordem decrescente.
                    top_10_fornecedores = fornecedores_count.sort_values(ascending=False).head(10)

                    # Formata o resultado para ser inclu√≠do no prompt da IA como uma string leg√≠vel.
                    formatted_result = "Os 10 fornecedores com mais Notas Fiscais s√£o:\n\n"
                    if not top_10_fornecedores.empty:
                        # Itera sobre os top 10 fornecedores e adiciona cada um ao resultado formatado.
                        for fornecedor, count in top_10_fornecedores.items():
                            formatted_result += f"- {fornecedor}: {count} Notas Fiscais\n"
                    else:
                        formatted_result += "N√£o foram encontrados dados de fornecedores ou notas fiscais para esta an√°lise." # Mensagem se n√£o houver dados.


                except Exception as e:
                    # Em caso de erro durante o c√°lculo, informa a IA e exibe um erro no Streamlit.
                    formatted_result = f"Erro interno ao calcular os 10 principais fornecedores: {e}"
                    st.error(formatted_result) # Exibe o erro no Streamlit.

            else:
                 # Se as colunas necess√°rias n√£o forem encontradas, informa a IA e exibe um aviso no Streamlit.
                 formatted_result = "N√£o foi poss√≠vel identificar as colunas de fornecedor ou chave de acesso nos dados para calcular o top 10."
                 st.warning(formatted_result) # Exibe o warning no Streamlit.
        # --- Fim da l√≥gica de detec√ß√£o e c√°lculo ---


        # Fun√ß√£o para criar um resumo estat√≠stico dos dados (usada para perguntas gerais)
        def create_data_summary(df, name="Dados"): # Adicionado nome para identificar no prompt
            """Cria um resumo estat√≠stico simplificado de um DataFrame para ser enviado √† IA."""
            if df is None: # Lida com o caso onde o DataFrame n√£o est√° dispon√≠vel.
                return f"Nenhum {name} dispon√≠vel para resumo."
            try:
                # Limita o resumo para economizar tokens que seriam enviados √† IA.
                summary = {
                    'total_rows': len(df), # N√∫mero total de linhas no DataFrame.
                    'columns': list(df.columns), # Lista de todas as colunas.
                    'sample': df.head(5).to_dict('records'), # Amostra das 5 primeiras linhas como lista de dicion√°rios.
                    # Resumo estat√≠stico para colunas num√©ricas, se existirem.
                    'numeric_summary': df.describe().to_dict() if df.select_dtypes(include=['float64', 'int64']).shape[1] > 0 else {}
                }
                # Retorna o resumo formatado como uma string JSON leg√≠vel.
                return f"RESUMO DOS {name.upper()}:\n{json.dumps(summary, indent=2)}"
            except Exception as e:
                 return f"Erro ao criar resumo dos {name}: {e}"


        # Preparar o contexto para a IA
        # Decide qual contexto enviar √† IA: um resultado pr√©-calculado ou um resumo dos DataFrames.
        if formatted_result:
            # Se um resultado espec√≠fico (ex: top 10 fornecedores) foi pr√©-calculado,
            # o prompt incluir√° esse resultado j√° processado.
            data_context_for_groq = f"RESULTADO DA AN√ÅLISE PR√âVIA:\n{formatted_result}"
        else:
            # Para perguntas gerais, cria resumos dos DataFrames de cabe√ßalho e itens.
            header_summary_str = create_data_summary(header_df, name="Dados de Cabe√ßalho")
            items_summary_str = create_data_summary(items_df, name="Dados de Itens")
            data_context_for_groq = f"{header_summary_str}\n\n{items_summary_str}" # Concatena os resumos.

        # Construir o prompt final para a Groq (modelo de IA)
        # O prompt √© ajustado para lidar com resultados pr√©-calculados ou resumos de dados.
        prompt_to_groq = f"""
        Voc√™ √© um assistente especializado em an√°lise de dados. Responda √† pergunta do usu√°rio baseado nos dados ou resumos fornecidos.
        \n\n{data_context_for_groq}\n\nPERGUNTA DO USU√ÅRIO: {question}\n\nInstru√ß√µes:
        \n- Responda de forma clara e objetiva.\n- Use os dados/resumos fornecidos nos arquivos 202401_NFs_Cabecalho.csv e 202401_NFs_Itens.csv para fundamentar sua resposta.
        \n- Se um resultado espec√≠fico foi fornecido (como uma lista de top 10), apresente esse resultado de forma amig√°vel e ignore a an√°lise dos dados brutos para essa parte.
        \n- Se a pergunta n√£o puder ser respondida com os dados/resumos dispon√≠veis, informe isso.
        \n- O arquivo 202401_NFs_Cabecalho.csv cont√©m os dados de cabe√ßalho das notas fiscais e o arquivo 202401_NFs_Itens.csv cont√©m os dados de itens das notas fiscais.
        \n- Se precisar de mais detalhes espec√≠ficos que n√£o est√£o no resumo, pe√ßa ao usu√°rio para refinar a pergunta ou fornecer mais dados.\n"""

        # Chama a API do OpenAI com o modelo "gpt-4o", a mensagem do usu√°rio (que inclui o prompt constru√≠do)
        # Define a temperatura (criatividade da resposta) e o m√°ximo de tokens.
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt_to_groq}],
            temperature=0.1,
            max_tokens=1000
        )

        return response.choices[0].message.content # Retorna o conte√∫do da resposta da IA.
    except Exception as e:
        # Captura e retorna qualquer erro que ocorra durante a consulta √† IA.
        return f"Erro ao consultar a IA: {e}"

# Carregar dados
# Chamando a nova fun√ß√£o para carregar dados dos arquivos locais
header_df, items_df = load_data_from_local()

# Verificar se os dados foram carregados com sucesso antes de continuar
if header_df is not None and items_df is not None:
    st.sidebar.header("üìã Dados das Notas Fiscais")
    st.sidebar.write(f"**Total de Notas Fiscais (Cabe√ßalho):** {len(header_df)}")
    st.sidebar.write(f"**Total de Itens de Notas Fiscais:** {len(items_df)}")
    st.sidebar.write(f"**Colunas Cabe√ßalho:** {', '.join(header_df.columns)}")
    st.sidebar.write(f"**Colunas Itens:** { ', '.join(items_df.columns)}")

    # Mostrar preview dos dados
    with st.expander("üëÄ Visualizar dados do Cabe√ßalho"):
        st.dataframe(header_df)
    with st.expander("üëÄ Visualizar dados dos Itens"):
        st.dataframe(items_df)

    # Chat interface
    st.header("üí¨ Chat")

    # Inicializar hist√≥rico do chat
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Mostrar hist√≥rico do chat
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])     # Renderiza o conte√∫do da mensagem como Markdown.

    # Input do usu√°rio para digitar a pergunta.
    # `st.chat_input` fornece uma caixa de texto na parte inferior da interface de chat.
    if prompt := st.chat_input("Fa√ßa uma pergunta sobre as notas fiscais..."):
        # Adiciona a mensagem do usu√°rio ao hist√≥rico do chat.
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt) # Exibe a pergunta do usu√°rio na interface.

        # Obter resposta da IA.
        with st.chat_message("assistant"):
            with st.spinner("Analisando os dados..."): # Exibe um spinner enquanto a IA processa.
                # Chama a fun√ß√£o `query_ai` para obter a resposta da LLM.
                response = query_ai(prompt, header_df, items_df)
                st.markdown(response) # Exibe a resposta da IA na interface.

        # Adiciona a resposta da IA ao hist√≥rico do chat.
        st.session_state.messages.append({"role": "assistant", "content": response})

    # Bot√£o na barra lateral para limpar o hist√≥rico do chat.
    if st.sidebar.button("üóëÔ∏è Limpar Chat"):
        st.session_state.messages = [] # Limpa todas as mensagens do hist√≥rico.
        st.rerun() # Reinicia a aplica√ß√£o para refletir a limpeza do chat.

    # Se√ß√£o na barra lateral para exemplos de perguntas.
    st.sidebar.header("üí° Exemplos de Perguntas")
    example_questions = [
        "Quantas notas fiscais temos?",
        "Qual o valor total dos itens da nota fiscal com CHAVE DE ACESSO X?", # Substituir X por uma chave real nos exemplos
        "Liste os itens da nota fiscal com CHAVE DE ACESSO Y", # Substituir Y por uma chave real
        "Qual a quantidade total de um determinado produto (descreva o produto)?",
        "Qual nota fiscal tem mais itens?"
    ]

    # Adicionar um aviso sobre os exemplos de perguntas.
    st.sidebar.markdown("_Para testar perguntas espec√≠ficas sobre notas fiscais, substitua X ou Y por uma CHAVE DE ACESSO real dos seus dados._")

    # Cria bot√µes para cada exemplo de pergunta.
    for question in example_questions:
        if st.sidebar.button(question, key=f"example_{question}"):
            # Quando um bot√£o de exemplo √© clicado, adiciona a pergunta ao hist√≥rico do chat
            # e for√ßa um "rerun" para que a pergunta apare√ßa no `st.chat_input`.
            # A resposta da IA s√≥ ser√° gerada quando o usu√°rio "enviar" a pergunta no chat input.
            st.session_state.messages.append({"role": "user", "content": question})
            st.rerun()

else:
    # Mensagem mostrada se os dados n√£o forem carregados (ex: arquivos CSV n√£o encontrados).
    st.warning("N√£o foi poss√≠vel carregar os dados das Notas Fiscais. Verifique se os arquivos CSV est√£o no diret√≥rio correto.")
    # Limpa o hist√≥rico do chat se os dados n√£o carregarem para evitar erros em um estado inv√°lido.
    if "messages" in st.session_state:
        st.session_state.messages = []
